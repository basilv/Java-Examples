
	<!--  TODO: Add publication of artifacts for this module? -->    
	<!-- 
    <publications>
    	<artifact name="filter-api" type="jar"  conf="api" ext="jar"/>
    	<artifact name="filter-hmimpl" type="jar"  conf="homemade-impl" ext="jar"/>
    	<artifact name="filter-ccimpl" type="jar"  conf="cc-impl" ext="jar"/>    	
    </publications>
    -->    


		<!--  TODO: Consider using 'standard' set of configurations (list below from Spring's ivy.xml):
		<conf name="default" visibility="public" description="runtime dependencies and master artifact can be used with this conf" extends="runtime,master"/>
		<conf name="master" visibility="public" description="contains only the artifact published by this module itself, with no transitive dependencies"/>
		<conf name="compile" visibility="public" description="this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."/>
		<conf name="provided" visibility="public" description="this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."/>
		<conf name="runtime" visibility="public" description="this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath." extends="compile"/>
		<conf name="test" visibility="private" description="this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases." extends="runtime"/>
		<conf name="system" visibility="public" description="this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."/>
		<conf name="sources" visibility="public" description="this configuration contains the source artifact of this module, if any."/>
		<conf name="javadoc" visibility="public" description="this configuration contains the javadoc artifact of this module, if any."/>
		<conf name="optional" visibility="public" description="contains all optional dependencies"/>
		 -->

<!--  TODO: Check out
http://ant.apache.org/ivy/history/2.1.0-rc1/tutorial/multiproject.html
 -->

<!-- Default ivy properties -->
<!--
ivy.project.dir = ${basedir}
ivy.lib.dir = ${ivy.project.dir}/lib
ivy.build.artifacts.dir = ${ivy.project.dir}/build/artifacts
ivy.distrib.dir = ${ivy.project.dir}/distrib
	
ivy.resolver.default.check.modified = false
ivy.default.always.check.exact.revision = false

ivy.configurations = *
ivy.resolve.default.type.filter = *
ivy.status = integration
ivy.dep.file = ivy.xml
ivy.settings.file = ivysettings.xml
ivy.retrieve.pattern = ${ivy.lib.dir}/[artifact]-[revision](-[classifier]).[ext]
ivy.deliver.ivy.pattern = ${ivy.distrib.dir}/[type]s/[artifact]-[revision](-[classifier]).[ext]
ivy.publish.src.artifacts.pattern = ${ivy.distrib.dir}/[type]s/[artifact]-[revision](-[classifier]).[ext]
ivy.cache.ttl.default = 10s

ivy.report.output.pattern = [organisation]-[module]-[conf].[ext]

ivy.buildlist.ivyfilepath = ivy.xml

ivy.checksums=sha1,md5

ivy.log.modules.in.use=false

-->

<!--
A typical question for people using an IDE like eclipse and often changing
dependency revision: it's a bit boring to change your IDE project just to tell
him to use comp-build2596.jar instead of comp-build2595.jar, when you have
already changed your ivy file (and even if you haven't changed it, if you use
the continuous integration feature !). No problem, you have a total control on
the files retrieved using the pattern attribute in the retrieve task:

Here is the default pattern:

<ivy:retrieve pattern="${ivy.lib.dir}/[artifact]-[revision].[ext]"/>

And here is one which do not suffix file name with dependency revision:

<ivy:retrieve pattern="${ivy.lib.dir}/[artifact].[ext]"/>

And one which makes your lib directory have the same layout as the ibiblio repository:

<ivy:retrieve pattern="${ivy.lib.dir}/[module]/[type]s/[artifact]-[revision].[ext]"/>

Not too difficult, and really flexible, isn't it ? And check the retrieve task
reference documentation to learn more about it... 
-->		

